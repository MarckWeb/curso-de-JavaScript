// üìå PROPIEDADES DE STRING


//.length-. nos cuenta las letras q hay en nuestra cadena de texto, devuleve la longitud de la cadena 1 al n
const company = 'Coca-Cola-SA'
console.log(company.length) //muestra 12 de longitud

//.toUpperCase()= convierte la cadena en MAYUSCULAS
console.log(company.toUpperCase())

//.toLowerCase() = convierte la cadena en Minuscula
console.log(company.toLowerCase())



// üìå METODOS DE STRING

// üìå charAt(numero) devuelve el car√°cter que ocupa la posici√≥n en el √≠ndice especificado.
// Si el √≠ndice est√° fuera del rango v√°lido, devuelve una cadena vac√≠a.
// Solo toma un par√°metro; si se proporcionan dos, solo se utiliza el primero.

console.log('------------ m√©todo .charAt(numero)---------')
console.log(company.charAt(7)) // Devuelve 'l' porque 'l' ocupa la posici√≥n 7 en el string.
console.log(company.charAt()) // Devuelve 'C' porque si no se proporciona un √≠ndice, por defecto toma el primer car√°cter.
console.log(company.charAt(20)) // Devuelve una cadena vac√≠a ('') porque el √≠ndice 20 est√° fuera del rango v√°lido de la cadena.




// üìå charCodeAt(numero) devuelve el c√≥digo ASCII del car√°cter en la posici√≥n especificada.
// Es decir, devuelve el c√≥digo num√©rico que representa la letra en formato ASCII.

console.log('------------ m√©todo .charCodeAt(numero)---------')
console.log(company.charCodeAt(2)) // Devuelve 99 porque el c√≥digo ASCII para 'c' es 99.




// üìå Los corchetes [] no son un m√©todo, pero permiten acceder a los caracteres del string como lo hace el m√©todo .charAt().
// Puedes acceder a un car√°cter espec√≠fico proporcionando su √≠ndice dentro de los corchetes.

console.log('--- Acceso a caracteres con corchetes -------')
console.log(company[3]) // Devuelve 'a' porque el car√°cter en la posici√≥n 3 del string es 'a'.



// üìå indexOf(string) devuelve el √≠ndice del primer car√°cter de la cadena dada en el par√°metro.
// Si la cadena o palabra se encuentra dentro de otra cadena, devuelve la posici√≥n del primer car√°cter de la primera ocurrencia.
// Devolver√° -1 si el car√°cter no est√° presente en la cadena o si el par√°metro est√° vac√≠o.

const book = 'El-libro de la selva';

console.log('------------ M√©todo .indexOf() ---------')
console.log(`Lugar donde se encuentra 'libro': ${book.indexOf('libro')}`) // Devuelve 3, ya que 'libro' comienza en el √≠ndice 3.
console.log(`√çndice de 'bro': ${book.indexOf('bro')}`) // Devuelve 5, ya que 'bro' comienza en el √≠ndice 5 ('b' est√° en la posici√≥n 5).
console.log(`√çndice de 'amarillo': ${book.indexOf('amarillo')}`) // Devuelve -1, ya que 'amarillo' no est√° presente en el string.
console.log(`√çndice con par√°metro vac√≠o: ${book.indexOf()}`) // Devuelve -1, ya que no se proporciona un par√°metro.
console.log(`Con √≠ndice especificado: ${book.indexOf('l', 0)}`) // Devuelve 4, ya que 'l' se encuentra en el √≠ndice 4 (a partir del √≠ndice 0).



// üìå lastIndexOf(string) ayuda a encontrar el √≠ndice de la √∫ltima aparici√≥n de la cadena especificada en el string.
// Devuelve el √≠ndice de la √∫ltima ocurrencia del string dado en el par√°metro.

console.log('------------ M√©todo .lastIndexOf() ---------')
console.log(book.lastIndexOf('libro')) // Devuelve 3, ya que 'libro' comienza en el √≠ndice 3.
console.log(book.lastIndexOf('bro')) // Devuelve 5, ya que 'bro' comienza en el √≠ndice 5.


// üìå search() busca una coincidencia en la cadena y devuelve la posici√≥n donde comienza el texto.
// Devuelve la posici√≥n de inicio de la primera coincidencia encontrada.

console.log('------------ M√©todo .search() ---------')
console.log(book.search('la')) // Devuelve 12, ya que 'la' comienza en el √≠ndice 12.
console.log(book.search('selva')) // Devuelve 15, ya que 'selva' comienza en el √≠ndice 15.
console.log(book.search('va')) // Devuelve 18, ya que 'va' comienza en el √≠ndice 18.



// üìå slice(obligado(-mayor), opcional(-menor)) devuelve una parte de la cadena original, comenzando desde el √≠ndice indicado (obligado) hasta el √≠ndice antes del final especificado (opcional).
// Si se proporciona solo un par√°metro, devuelve la cadena desde ese √≠ndice hasta el final.
// Si se proporcionan dos par√°metros, el primero indica el inicio y el segundo el final de la cadena devuelta.
// Puede tomar valores negativos para contar desde el final de la cadena.

const description = 'Practica de metodos de un string';

console.log('------------ M√©todo .slice() ---------')
console.log(`Slice desde el √≠ndice 14: "${description.slice(14)}" `) // Devuelve "todos de un string"
console.log(`Slice desde el √≠ndice 0 hasta 10: "${description.slice(0, 10)}" `) // Devuelve "Practica d"
console.log(`Slice desde -20 hasta -5: "${description.slice(-20, -5)}" `) // Devuelve "metodos de un s"
console.log(`Slice con par√°metros incorrectos: "${description.slice(-10, -11)}" `) // Devuelve una cadena vac√≠a ""



// üìå substring(numbers) es similar a .slice(), pero no admite valores negativos como par√°metros.
// Devuelve una parte de la cadena original, comenzando desde el √≠ndice indicado (obligatorio) hasta el √≠ndice antes del final especificado (opcional).

console.log('------------ M√©todo .substring() ---------')
console.log(`Substring desde el √≠ndice 24: "${description.substring(24)}" `) // Devuelve "n string"
console.log(`Substring desde el √≠ndice 10 hasta 20: "${description.substring(10, 20)}" `) // Devuelve "e metodos"
console.log(`Substring con par√°metros negativos: "${description.substring(-10, -8)}" `) // No se deber√≠an usar valores negativos, no se devuelve nada.


// üìå concat()-. hace la union de cadenas de texto
const producto = 'Monitor 20 pulgadas ';
const precio = '30 USD ';

console.log('------------ M√©todo .concat() ---------')
// Concatenamos los dos strings usando el m√©todo .concat()
console.log(`${producto.concat(precio)}`); // Devuelve "Monitor 20 pulgadas 30 USD "

// Tambi√©n podemos concatenar un string directamente a la variable
console.log(`${producto.concat('en descuento')}`); // Devuelve "Monitor 20 pulgadas en descuento"




console.log('------------ M√©todo .replace() ---------')

// üìå  replace(string, new substring) reemplaza en la cadena el texto especificado en el primer par√°metro con el texto indicado en el segundo par√°metro.
const word = 'visita la p√°gina web en google';

// En el primer par√°metro se coloca el string que se va a reemplazar y en el segundo par√°metro el que va a reemplazar.
console.log(word.replace('google', 'explorer')); // Devuelve "visita la p√°gina web en explorer"
console.log(word.replace('visita la p√°gina web en google', 'averiguar')); // Devuelve "averiguar"
// Si se asigna otro texto que no est√© en la cadena o si se deja vac√≠o el par√°metro, no se realiza ning√∫n reemplazo.
console.log(word.replace()); // Devuelve "visita la p√°gina web en google"
console.log(word.replace('el resto')); // Devuelve "visita la p√°gina web en google"
console.log('----------------------------------------------')












